import numpy as np
import matplotlib.pyplot as plt

def barnsley_fern(n_points):
    # Define transformation matrices and probabilities
    transformations = [
        (np.array([[0, 0], [0, 0.16]]), np.array([0, 0])),
        (np.array([[0.85, 0.04], [-0.04, 0.85]]), np.array([0, 1.6])),
        (np.array([[0.2, -0.26], [0.23, 0.22]]), np.array([0, 1.6])),
        (np.array([[-0.15, 0.28], [0.26, 0.24]]), np.array([0, 0.44])),
        (np.array([[0, 0], [0, 0.16]]), np.array([0, 0]))
    ]
    probabilities = [0.01, 0.85, 0.07, 0.07, 0.01]

    # Initialize points
    points = np.zeros((n_points, 2))
    weights = np.cumsum(probabilities)

    # Iterate to generate points
    for i in range(1, n_points):
        rand = np.random.random()
        selected_transformation = next(i for i, w in enumerate(weights) if rand < w)
        transformation_matrix, translation_vector = transformations[selected_transformation]
        points[i] = np.dot(transformation_matrix, points[i-1]) + translation_vector

    return points

def plot_barnsley_fern(points):
    plt.scatter(points[:, 0], points[:, 1], s=0.2, c='green')
    plt.title("Barnsley Fern Fractal")
    plt.xlabel("X")
    plt.ylabel("Y")
    plt.show()

if __name__ == "__main__":
    n_points = 100000
    points = barnsley_fern(n_points)
    plot_barnsley_fern(points)
